{"version":3,"sources":["components/node.jsx","algorithms/structs.js","algorithms/algorithm.js","algorithms/generators.js","components/graph.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Node","props","handleMouseLeave","e","target","style","cursor","handleMouseDown","bind","handleMouseOver","handleMouseUp","div_ref","React","createRef","state","wall","isStart","isEnd","console","log","this","ref","className","onMouseDown","onMouseOver","onMouseUp","onMouseLeave","window","GLOBAL","animate","mouse_down","x","y","dragging","prev","getComputedStyle","getPropertyValue","setState","onMD","onMO","onDrag","Component","MinHeap","comparator","insert","obj","array","push","length","index","priority","Math","floor","popMin","ret","pop","sinkDown","display","top","isEmpty","num1","num2","cur","smallest","left","right","PriorityQueue","enqueue","heap","dequeue","size","front","Algorithms","run","graph","start","end","h","algo","run_djikstra","aStar","BreadthFirst","depthFirst","heuristic","q","visited","shortest","distance","node","isWall","back_trace","neighbors","get_neighbor","neighbor","dist","fScore","Animate","iter","stack","shortest_path","animate_visited","setTimeout","current","classList","add","func","animate_shortest","animated","Heuristic","euclidian","sqrt","manhattan","abs","filter","cost","reverse","GraphGen","backtracing","unvisited","getUnvisited","getNeighbors","random","row","temp","col","NoiseGen","y_size","x_size","perlin","values","amplitude","value","i","t","b","l","r","n0","dotProduct","n1","ix0","lerp","ix1","applyWeight","a0","a1","w","y1","x1","dx","gradient","dy","vector","Graph","handleDrag","prev_x","prev_y","ref_array","clear","graphInit","clearVisual","Infinity","remove","clearAnimation","generateWeight","nGen","generateMaze","algos","nodeRefInit","map","row_num","id","key","col_num","nextProps","nextState","algorithm","createNode","rows","cols","App","handleWeight","graph_ref","handleGraph","algorithms","handleSelect","handleVisualize","handleClear","dropdownTitle","algoIndex","Navbar","bg","variant","expand","Nav","NavDropdown","dropdown","title","Item","eventKey","onSelect","Link","onClick","newTitle","parseInt","runAlgorithm","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a35547d.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/node.css';\r\n\r\nclass Node extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseOver = this.handleMouseOver.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.div_ref = React.createRef();\r\n        this.state = {\r\n            wall: false,\r\n            isStart: false,\r\n            isEnd: false\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log('rerendering');\r\n        const {wall, isStart, isEnd} = this.state;\r\n        \r\n        if(isStart) {\r\n            return <div ref={this.div_ref} className=\"node start\" \r\n            onMouseDown={this.handleMouseDown} \r\n            onMouseOver={this.handleMouseOver}\r\n            onMouseUp={this.handleMouseUp}\r\n            onMouseLeave={this.handleMouseLeave}></div>\r\n        }\r\n\r\n        else if(isEnd) {\r\n            return <div ref={this.div_ref} className=\"node end\" \r\n            onMouseDown={this.handleMouseDown} \r\n            onMouseOver={this.handleMouseOver}\r\n            onMouseUp={this.handleMouseUp}\r\n            onMouseLeave={this.handleMouseLeave}></div>\r\n        }\r\n\r\n        else if(wall) { \r\n            return <div ref={this.div_ref} className=\"node wall\" \r\n            onMouseDown={this.handleMouseDown} \r\n            onMouseOver={this.handleMouseOver}\r\n            onMouseUp={this.handleMouseUp}\r\n            onMouseLeave={this.handleMouseLeave}></div>\r\n        }\r\n        \r\n        else {\r\n            return <div ref={this.div_ref} className=\"node\" \r\n            onMouseDown={this.handleMouseDown} \r\n            onMouseOver={this.handleMouseOver}\r\n            onMouseUp={this.handleMouseUp}\r\n            onMouseLeave={this.handleMouseLeave}></div>\r\n        }\r\n    }\r\n\r\n    handleMouseDown(e) {\r\n        if (!window.GLOBAL.animate){\r\n            window.GLOBAL.mouse_down = true; \r\n            const {wall, isStart, isEnd} = this.state;\r\n            if(isStart || isEnd){\r\n                const {x, y} = this.props;\r\n                window.GLOBAL.dragging = true;\r\n                window.GLOBAL.prev = {x: x, y: y};\r\n                window.cursor = window.getComputedStyle(e.target).getPropertyValue(\"background-image\");\r\n            } \r\n            else if(!wall && !isStart && !isEnd) {\r\n                this.setState({wall: true});\r\n                this.props.onMD(this.props.y, this.props.x);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseOver(e) {\r\n        const {wall, isStart, isEnd} = this.state; \r\n        const {x, y} = this.props;\r\n        if(window.GLOBAL.dragging) {\r\n            e.target.style.cursor = `${window.cursor}, auto`;\r\n        }\r\n        if(window.GLOBAL.mouse_down && !window.GLOBAL.animate && !window.GLOBAL.dragging) {\r\n            if(!wall && !isStart && !isEnd) {\r\n            this.setState({wall: true});\r\n            this.props.onMO(y, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseLeave = (e) => {\r\n        e.target.style.cursor = 'pointer';\r\n    }\r\n\r\n    handleMouseUp(e) {\r\n        window.GLOBAL.mouse_down = false;\r\n        if(window.GLOBAL.dragging) {\r\n            window.GLOBAL.dragging = false;\r\n            this.props.onDrag(window.GLOBAL.prev.x, window.GLOBAL.prev.y, this.props.x, this.props.y);\r\n            window.GLOBAL.prev = null;\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default Node","export {PriorityQueue};\r\n\r\nclass MinHeap {\r\n    /*\r\n    This is a min-heap implementation using an array.\r\n    The constructor has 1 argument which is a comparator function.\r\n    The comparator defaults to integer comparison if no comparator\r\n    is supplied.\r\n    left child's index: 2 * i\r\n    right child's index: 2 * i + 1    \r\n    */\r\n    constructor(comparator=null) {\r\n        if(comparator) {\r\n            this.comparator = comparator;\r\n        }\r\n        this.array = [null];\r\n    }\r\n\r\n    insert = (obj) => {\r\n        this.array.push(obj);\r\n        if(this.array.length > 2) {\r\n            let index = this.array.length - 1;\r\n            while( this.comparator(this.array[index].priority, this.array[Math.floor(index/2)].priority) ){\r\n                //swap\r\n                if(index >= 1) {\r\n                    [this.array[index], this.array[Math.floor(index/2)]] = [this.array[Math.floor(index/2)], this.array[index]];\r\n                    if (Math.floor(index/2) > 1){ \r\n                        index = Math.floor(index/2);\r\n                    }\r\n                    else {\r\n                        break;  \r\n                    } \r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    popMin = () => {\r\n        //delete min\r\n        //first swap root and last node.\r\n        [this.array[1], this.array[this.array.length - 1]] = [this.array[this.array.length - 1], this.array[1]];\r\n        let ret = this.array.pop().obj;\r\n        let index = 1;\r\n        this.sinkDown(index);\r\n        return ret;\r\n    }\r\n\r\n    sinkDown(cur) {\r\n        let smallest = cur;\r\n        let left = 2 * cur;\r\n        let right = 2 * cur + 1; \r\n        if(left < this.array.length && this.comparator(this.array[left].priority, this.array[smallest].priority) ) {\r\n            smallest = left;\r\n        }\r\n        if(right < this.array.length && this.comparator(this.array[right].priority, this.array[smallest].priority) ) {\r\n            smallest = right;\r\n        }\r\n        if(smallest !== cur) {\r\n            [this.array[cur], this.array[smallest]] = [this.array[smallest], this.array[cur]];\r\n            this.sinkDown(smallest);\r\n        }\r\n    }\r\n\r\n    display = () => {\r\n        console.log(this.array);\r\n    }\r\n\r\n    top = () => {\r\n        return this.array[1].obj;\r\n    }\r\n\r\n    isEmpty = () => {\r\n        return this.array.length === 1;\r\n    }\r\n\r\n    comparator = (num1, num2) => {\r\n        return num1 <= num2;\r\n    }\r\n\r\n    length = () => {\r\n        return this.array.length - 1; \r\n    }\r\n}\r\n\r\nclass PriorityQueue {\r\n    constructor() {\r\n        this.heap = new MinHeap();\r\n    }\r\n\r\n    enqueue = (obj, priority) => {\r\n\r\n        this.heap.insert({obj: obj, priority: priority});\r\n    }\r\n\r\n    dequeue = (obj) => {\r\n        return this.heap.popMin();\r\n    }\r\n\r\n    isEmpty = (obj) => {\r\n        return this.heap.isEmpty();\r\n    }\r\n\r\n    size = () => {\r\n        return this.heap.length();\r\n    }\r\n\r\n    front = () => {\r\n        return this.heap.top();\r\n    }\r\n\r\n    display = () => {\r\n        this.heap.display();\r\n    }\r\n}","import {PriorityQueue} from './structs';\r\nexport {Algorithms, Animate, Heuristic};\r\n\r\nclass Algorithms {\r\n\r\n    run = (graph, start, end, h, algo) => {\r\n        if (algo === 1) {\r\n            return this.run_djikstra(graph, start, end);\r\n        }\r\n        if (algo === 2) {\r\n            return this.aStar(graph, start, end, h);\r\n        }\r\n        if (algo === 3) {\r\n            return this.BreadthFirst(graph, start, end);\r\n        }\r\n        if (algo === 4) {\r\n            //Depth fist search\r\n            return this.depthFirst(graph, start, end);\r\n        }\r\n        else {\r\n            //default to djikstra\r\n            return this.run_djikstra(graph, start, end);\r\n        }\r\n    }\r\n\r\n    run_djikstra(graph, start, end) { \r\n        console.log('running djikstra');\r\n        const visited = [];\r\n        let shortest = null; \r\n        const q = new PriorityQueue();\r\n        start.distance = 0;\r\n\r\n        q.enqueue(start, start.distance);\r\n        while(!q.isEmpty()) {\r\n            const node = q.dequeue();\r\n            if (node.isWall) break;\r\n\r\n            node.visited = true;\r\n            visited.push(node);\r\n\r\n            let neighbors = get_neighbor(graph, node);\r\n            for (const neighbor of neighbors) {\r\n                const dist = node.distance + neighbor.length;\r\n                if (dist < neighbor.distance) {\r\n                    neighbor.distance = dist;\r\n                    neighbor.prev = node;\r\n                    if(neighbor === end) console.log(neighbor);\r\n                    neighbor.visited = true;\r\n                    q.enqueue(neighbor, neighbor.distance);\r\n                }\r\n            }\r\n        }\r\n\r\n        shortest = back_trace(end); \r\n        return new Animate(visited, shortest);\r\n    }\r\n\r\n    aStar = (graph, start, end, heuristic) => {\r\n        /* Runs A* with the provided heuristic funtion */\r\n        const q = new PriorityQueue();\r\n        const visited = [];\r\n        let shortest = null;\r\n        start.distance = 0 + heuristic(start, end);\r\n        q.enqueue(start, heuristic(start, end));\r\n\r\n        while(!q.isEmpty()) {\r\n            const node = q.dequeue();\r\n\r\n            if (node.isWall) break;\r\n            node.visited = true;\r\n            visited.push(node);\r\n\r\n            if(node === end) {\r\n                shortest = back_trace(node);\r\n                break;\r\n            }\r\n            \r\n            const neighbors = get_neighbor(graph, node);\r\n            for(const neighbor of neighbors) {\r\n                const dist = node.distance + neighbor.length;\r\n                if (dist < neighbor.distance) {\r\n                    neighbor.distance = dist;\r\n                    neighbor.fScore = dist + heuristic(neighbor, end);\r\n                    neighbor.prev = node;\r\n                    neighbor.visited = true;\r\n                    q.enqueue(neighbor, neighbor.fScore);\r\n                }\r\n            }\r\n        }\r\n\r\n        return new Animate(visited, shortest);\r\n    };\r\n\r\n    BreadthFirst = (graph, start, end) => {\r\n        const q = new PriorityQueue();\r\n        const visited = [];\r\n        let shortest = null;\r\n        let iter = 1;\r\n        \r\n        q.enqueue(start, iter); iter++;\r\n        \r\n        while(!q.isEmpty()) {\r\n            const cur = q.dequeue();\r\n\r\n            if(cur.isWall) break;\r\n            cur.visited = true;\r\n            visited.push(cur);\r\n\r\n            const neighbors = get_neighbor(graph, cur);\r\n            \r\n            for (const neighbor of neighbors) {\r\n                neighbor.prev = cur;\r\n                neighbor.visited = true;\r\n                visited.push(neighbor);\r\n                q.enqueue(neighbor, iter); iter++;\r\n            }\r\n        }\r\n\r\n        shortest = back_trace(end);\r\n        return new Animate(visited, shortest);\r\n    }; \r\n\r\n    depthFirst = (graph, start, end) => {\r\n        const visited = [];\r\n        let shortest = null; \r\n        const stack = [];\r\n        stack.push(start);\r\n\r\n        while(stack.length > 0) {\r\n            let cur = stack.pop();\r\n\r\n            if(cur.isWall) break;\r\n\r\n            if(cur === end) shortest = back_trace(cur);\r\n\r\n            if(!cur.visited) {\r\n                cur.visited = true;\r\n                visited.push(cur);\r\n                const neighbors = get_neighbor(graph, cur);\r\n                for(const neighbor of neighbors) {\r\n                    neighbor.prev = cur;\r\n                    stack.push(neighbor);\r\n                }\r\n            }\r\n        }\r\n\r\n        return new Animate(visited, shortest);\r\n    };\r\n}\r\n\r\nclass Animate {\r\n    constructor (visited , shortest_path) {\r\n        this.visited = visited;\r\n        this.shortest = shortest_path;\r\n    }\r\n\r\n    animate = (ref)=> {\r\n        window.GLOBAL.animate = true;\r\n        this.animate_visited(ref);\r\n    };\r\n\r\n    animate_visited = (ref)=> {\r\n        let iter = 1;\r\n        for (const node of this.visited) {\r\n            const {x, y} = node;\r\n            setTimeout((ref) => {\r\n                ref.current.div_ref.current.classList.add('visited');\r\n            }, 7 * iter, ref[y][x]);\r\n            iter++;\r\n        }  \r\n        setTimeout((ref, func) => {\r\n            func(ref);\r\n        }, (7 * iter), ref, this.animate_shortest);\r\n    };\r\n\r\n    animate_shortest = (ref) => {\r\n        if(this.shortest == null) {\r\n            window.GLOBAL.animate = false;\r\n            window.GLOBAL.animated = true;\r\n            return; \r\n        }\r\n        let iter = 1;\r\n        for (const node of this.shortest) {\r\n            const {x, y} = node;\r\n            setTimeout((ref) => {\r\n                ref.current.div_ref.current.classList.add('path');\r\n            }, 15 * iter, ref[y][x]);\r\n            iter++;\r\n        }\r\n        \r\n        setTimeout(() => {\r\n            window.GLOBAL.animate = false;\r\n            window.GLOBAL.animated = true;\r\n        }, 15 * iter);\r\n    };\r\n}\r\n\r\nclass Heuristic {\r\n    \r\n    euclidian = (start, end) => {\r\n        const x = end.x - start.x;\r\n        const y = end.y - start.y;\r\n\r\n        return Math.sqrt( (x*x + y*y) );\r\n    }\r\n\r\n    manhattan = (start, end) => {\r\n        const x = Math.abs(end.x - start.x);\r\n        const y = Math.abs(end.y - start.y);\r\n        return  x + y;\r\n    }   \r\n\r\n}\r\n\r\nconst get_neighbor = (graph, node) => {\r\n    const {x, y} = node;\r\n    const neighbors = [];\r\n    if (y > 0) neighbors.push(graph[y - 1][x]);\r\n    if (y < graph.length - 1) neighbors.push(graph[y + 1][x]);\r\n    if (x > 0) neighbors.push(graph[y][x - 1]);\r\n    if (x < graph[0].length - 1) neighbors.push(graph[y][x + 1]);\r\n\r\n    return neighbors.filter(neighbor => !neighbor.visited && !neighbor.isWall);\r\n};\r\n\r\nconst back_trace = (node) => {\r\n    if(node.isWall) return null;\r\n    let cost = 0;\r\n    const shortest_path = []\r\n    let cur = node;\r\n    while (cur != null) {\r\n        cost += cur.length;\r\n        shortest_path.push(cur);\r\n        cur = cur.prev;\r\n    }  \r\n    console.log(cost);\r\n\r\n    return shortest_path.length === 0 ? null: shortest_path.reverse();\r\n};","export {GraphGen, NoiseGen};\r\n\r\n/* \r\nHere contains some generators to make the\r\ngraph more interesting. To generate weights\r\nfor the graph there will be different noise\r\ngenerators.\r\nTo generate different mazes we will use some maze generation algorithms.\r\n*/\r\n\r\nclass GraphGen {\r\n    backtracing = (graph, ref) => {\r\n        const stack = [];\r\n        const unvisited = this.getUnvisited(graph, ref);\r\n        \r\n        stack.push(unvisited[0][0]);\r\n        let left = unvisited.length * unvisited[0].length;\r\n        let current = unvisited[0][0];\r\n        left--;\r\n        let iter = 1;\r\n\r\n        while(left > 0) {\r\n            current.visited = true; \r\n            const neighbors = getNeighbors(unvisited, current.node);\r\n            if (neighbors.length > 0) {\r\n                let rand = Math.floor( (Math.random() * 100) % neighbors.length );\r\n                const neighbor = neighbors[rand];\r\n                neighbor.visited = true;\r\n                let {x, y} = neighbor.node;\r\n\r\n                if (x < current.node.x){\r\n                    x = current.node.x - 1;\r\n                }\r\n                else if(x > current.node.x ){\r\n                    x--;\r\n                }\r\n\r\n                if (y < current.node.y){\r\n                    y = current.node.y - 1;\r\n                }\r\n                else if (y > current.node.y) {\r\n                    y--;\r\n                }\r\n                \r\n                graph[y][x].isWall = false;\r\n                setTimeout((ref) => {\r\n                    ref.current.setState({wall: false});\r\n                }, 10 * iter, ref[y][x]);\r\n\r\n                stack.push(neighbor);\r\n                left--;\r\n            }\r\n            else {\r\n                current = stack.pop();\r\n            }\r\n            iter++;\r\n        }\r\n\r\n    }\r\n\r\n    getUnvisited = (graph, ref) => {\r\n        const unvisited = [];\r\n        let iter = 1;\r\n        for(let row = 0; row < graph.length; row ++) {\r\n            if (row % 2 === 1) {\r\n                for(const node of graph[row]) {\r\n                    if(node.isStart || node.isEnd) continue;\r\n                    const {x, y} = node;\r\n                    if(Math.random() > 0.1) {\r\n                        node.isWall = true;\r\n                        setTimeout((ref) => {\r\n                            ref.current.setState({wall: true});\r\n                        }, 10 * iter, ref[y][x]);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const temp = [];\r\n\r\n                for(let col = 0; col < graph[0].length; col += 2){\r\n                    temp.push({node: graph[row][col], visited: false});\r\n                    if(col + 1 < graph[0].length) {\r\n                        const node = graph[row][col + 1];\r\n                        if(node.isStart || node.isEnd) continue;\r\n                        const {x, y} = node;\r\n                        if(Math.random() > 0.1) {\r\n                            node.isWall = true;\r\n                            setTimeout((ref) => {\r\n                                ref.current.setState({wall: true});\r\n                            }, 10 * iter, ref[y][x]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                unvisited.push(temp); \r\n            }\r\n        }\r\n\r\n        return unvisited;\r\n    }\r\n}\r\n\r\nclass NoiseGen {\r\n\r\n    constructor(y_size, x_size) {\r\n        this.gradient = [];\r\n        for( let row = 0; row < y_size; row++) {\r\n            this.gradient[row] = [];\r\n            for( let col = 0; col < x_size; col++){\r\n                let vector = []\r\n                vector.push(Math.random());\r\n                vector.push(Math.random());\r\n                this.gradient[row].push(vector);\r\n            }\r\n        }\r\n        this.values = [];\r\n    }\r\n\r\n    perlin = (graph) => {\r\n        /*\r\n        Generates perlin noise to populate graph with weights\r\n        */\r\n\r\n        let zoom = 0.1;\r\n        for (let row=0 ; row < graph.length; row++) {\r\n            this.values[row] = [];\r\n            for (let col=0 ; col < graph[0].length; col++) {\r\n                let amplitude = 1.0;\r\n                let value = 0; \r\n\r\n                for(let i = 0; i < 4; i++ ) {\r\n                    let t = row - 1;\r\n                    let b = row + 1;\r\n                    let l = col - 1;\r\n                    let r = col + 1;\r\n    \r\n                    //Edge cases wrap around the graph;\r\n                    if (row === 0) t = graph.length - 1;\r\n                    if (row === graph.length - 1) b = 0;\r\n                    if (col === 0) l = graph[0].length - 1;\r\n                    if (col === graph[0].length - 1) r = 0;\r\n                    \r\n                    let n0 = this.dotProduct(row, col, t, col);\r\n                    let n1 = this.dotProduct(row, col, row, l);\r\n                    let ix0 = this.lerp(n0, n1, zoom);\r\n    \r\n                    n0 = this.dotProduct(row, col, b, col);\r\n                    n1 = this.dotProduct(row, col, row, r);\r\n                    let ix1 = this.lerp(n0, n1, zoom);\r\n                    \r\n                    value += this.lerp(ix0, ix1, zoom) * amplitude;\r\n                    amplitude *= 0.2;\r\n                }\r\n\r\n                this.values[row].push(Math.abs(value) );\r\n            }\r\n        }\r\n    }\r\n\r\n    applyWeight = (graph, ref) => {\r\n\r\n        for (let row = 0; row < this.values.length ; row++) {\r\n            for (let col = 0; col < this.values[0].length ; col++) {\r\n                if (graph[row][col].isWall) continue;\r\n                const cur = this.values[row][col];\r\n\r\n                if (cur > 0 && cur <= 0.25){\r\n                    graph[row][col].length = 1;\r\n                    ref[row][col].current.div_ref.current.classList.add('light');\r\n                }\r\n                else if (cur > 0.25 && cur <= 0.50){\r\n                    graph[row][col].length = 2;\r\n                    ref[row][col].current.div_ref.current.classList.add('medium');\r\n                }\r\n\r\n                else if (cur > 0.50 && cur <= 0.75){\r\n                    graph[row][col].length = 3;\r\n                    ref[row][col].current.div_ref.current.classList.add('heavy');\r\n                }\r\n                else if (cur > 0.75){\r\n                    graph[row][col].length = 4;\r\n                    ref[row][col].current.div_ref.current.classList.add('insane');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    lerp = (a0, a1, w) => {\r\n        return (1.0 - w)*a0 + w*a1;\r\n    } \r\n\r\n    dotProduct = (y, x, y1, x1) => {\r\n        const dx = this.gradient[y][x][0];\r\n        const dy = this.gradient[y][x][1];\r\n        \r\n        return (dx*this.gradient[y1][x1][0] + dy*this.gradient[y1][x1][1]);\r\n    }\r\n\r\n}\r\n\r\nconst getNeighbors = (graph, node) => {\r\n    let {x, y} = node;\r\n    x = x / 2;\r\n    y = y / 2;\r\n    const neighbors = [];\r\n    if( y > 0) neighbors.push(graph[y - 1][x]); //top\r\n    if( y < graph.length - 1) neighbors.push(graph[y + 1][x]); //bottom\r\n    if( x > 0) neighbors.push(graph[y][x - 1]);\r\n    if( x < graph[0].length - 1) neighbors.push(graph[y][x + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.visited);\r\n}","import React from 'react';\r\nimport '../css/node.css';\r\nimport '../css/grid.css';\r\nimport Node from './node';\r\nimport {Algorithms, Heuristic} from '../algorithms/algorithm';\r\nimport {NoiseGen, GraphGen} from '../algorithms/generators';\r\n\r\nclass Graph extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.algos = new Algorithms();\r\n        this.h = new Heuristic();\r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseOver = this.handleMouseOver.bind(this);\r\n        this.state = {\r\n            y_size: 37,\r\n            x_size: 75,\r\n        };\r\n        this.graph = graphInit(this.state.y_size, this.state.x_size);\r\n        this.ref_array = nodeRefInit(this.state.y_size, this.state.x_size);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"grid\" onMouseLeave={this.handleMouseLeave}>\r\n                {this.graph.map((row, row_num) => {\r\n                    return (\r\n                        <div className=\"row\" id={row_num} key={row_num}>\r\n                            {row.map( (node, col_num) => {\r\n                                return (\r\n                                    <Node ref={this.ref_array[row_num][col_num]} key={col_num} x={node.x} y={node.y}\r\n                                        onMD={this.handleMouseDown} onMO={this.handleMouseOver} onDrag={this.handleDrag}></Node>\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Component rendered set the initial start, end point.\r\n        this.graph[19][15].isStart = true;\r\n        this.graph[19][60].isEnd = true;\r\n        this.start = {y: 19, x: 15};\r\n        this.end = {y: 19, x:60};\r\n        this.ref_array[this.start.y][this.start.x].current.setState({isStart: true});\r\n        this.ref_array[this.end.y][this.end.x].current.setState({isEnd: true });\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        this.graph[row][col].isWall = !this.graph[row][col].isWall;\r\n    }\r\n\r\n    handleMouseOver(row, col) {\r\n        if(window.GLOBAL.mouse_down) {\r\n            this.graph[row][col].isWall = !this.graph[row][col].isWall;\r\n        }\r\n    }\r\n\r\n    handleMouseLeave = (e) => {\r\n        window.GLOBAL.dragging = false; \r\n        window.GLOBAL.prev = null;\r\n        window.GLOBAL.mouse_down = false;\r\n    }\r\n\r\n    handleDrag = (prev_x, prev_y, x, y) => {\r\n        const prev = this.graph[prev_y][prev_x];\r\n        const node = this.graph[y][x];\r\n        if(node.isWall || node.isStart || node.isEnd) return; \r\n        if(prev.isStart) {\r\n            prev.isStart = false;\r\n            this.ref_array[prev_y][prev_x].current.setState({isStart: false});\r\n            node.isStart = true;\r\n            this.ref_array[y][x].current.setState({isStart: true});\r\n            this.start = {x: node.x, y: node.y};\r\n        }\r\n        else {\r\n            prev.isEnd = false;\r\n            this.ref_array[prev_y][prev_x].current.setState({isEnd: false});\r\n            node.isEnd = true;\r\n            this.ref_array[y][x].current.setState({isEnd: true});\r\n            this.end = {x: node.x, y: node.y};\r\n        }\r\n    }\r\n\r\n    runAlgorithm(props) {\r\n        if(window.GLOBAL.animated) {\r\n            this.clearAnimation();\r\n        }\r\n        let animate = this.algos.run(this.graph, this.graph[this.start.y][this.start.x], this.graph[this.end.y][this.end.x], this.h.manhattan, props.algorithm);\r\n        animate.animate(this.ref_array);\r\n    }\r\n\r\n    clear= ()=> {\r\n        const {x_size, y_size} = this.state; \r\n        this.graph = graphInit(y_size, x_size);\r\n        for(const row of this.ref_array) {\r\n            for(const node of row) {\r\n                node.current.div_ref.current.classList = ['node'];\r\n                const state = {wall: false, isStart: false, isEnd: false};\r\n                if(node.isStart) state.isStart = true;\r\n                if(node.isEnd) state.isEnd = true;\r\n                node.current.setState(state);\r\n            }\r\n        }\r\n    };\r\n\r\n    clearVisual= () => {\r\n        for(const row of this.ref_array) {\r\n            for(const node of row) {\r\n                const {x, y} = node.current.props;\r\n                const temp = this.graph[y][x];\r\n                if (temp.isWall) continue;\r\n                this.graph[y][x] = {\r\n                    ...temp,\r\n                    visited: false,\r\n                    prev: null,\r\n                    distance: Infinity\r\n                }\r\n                node.current.div_ref.current.classList.remove('light');\r\n                node.current.div_ref.current.classList.remove('medium');\r\n                node.current.div_ref.current.classList.remove('heavy');\r\n                node.current.div_ref.current.classList.remove('insane');\r\n            }\r\n        }\r\n    }\r\n\r\n    clearAnimation= () => {\r\n        for(const row of this.ref_array) {\r\n            for(const node of row) {\r\n                const {x, y} = node.current.props;\r\n                const temp = this.graph[y][x];\r\n                this.graph[y][x] = {\r\n                    ...temp,\r\n                    visited: false,\r\n                    prev: null,\r\n                    distance: Infinity,\r\n                    fScore: Infinity\r\n                }\r\n                node.current.div_ref.current.classList.remove('path');\r\n                node.current.div_ref.current.classList.remove('visited');\r\n            }\r\n        }\r\n    }\r\n\r\n    generateWeight = () => {\r\n        this.clearVisual();\r\n        const {y_size, x_size} = this.state;\r\n        const nGen = new NoiseGen(y_size, x_size);\r\n        nGen.perlin(this.graph);\r\n        nGen.applyWeight(this.graph, this.ref_array);\r\n    }\r\n\r\n    generateMaze = () => {\r\n        this.clearVisual();\r\n        const mGen = new GraphGen ();\r\n        mGen.backtracing(this.graph, this.ref_array);\r\n    }\r\n}\r\n\r\nconst createNode = (row, col) => {\r\n    return {\r\n        y: row,\r\n        x: col,\r\n        length: 1,\r\n        distance: Infinity,\r\n        fScore: Infinity,\r\n        isWall: false,\r\n        visited: false,\r\n        prev: null,\r\n        isStart: false,\r\n        isEnd: false\r\n    };\r\n};\r\n\r\nconst graphInit = (rows, cols) => {\r\n    const graph = [];\r\n    for(let row = 0; row < rows; row++) {\r\n        graph[row] = [];\r\n        for(let col = 0; col < cols; col++) {\r\n            graph[row].push(createNode(row, col));\r\n        }\r\n    }\r\n    return graph;\r\n}\r\n\r\nconst nodeRefInit = (rows, cols) => {\r\n    const ref_array = [];\r\n    for(let row = 0; row < rows; row++){\r\n        ref_array[row] = [];\r\n        for (let col = 0; col < cols; col++){\r\n            ref_array[row].push(React.createRef());\r\n        }\r\n    }\r\n    return ref_array;\r\n}\r\n\r\nexport default Graph;","import React from 'react';\nimport './css/App.css';\nimport Graph from './components/graph';\nimport {Navbar, Button} from 'react-bootstrap';\nimport {Nav} from 'react-bootstrap';\nimport {NavDropdown} from 'react-bootstrap';\nimport './css/navbar.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.algorithms = ['Djikstra', 'A*', 'BFS', 'DFS'];\n    this.handleSelect = this.handleSelect.bind(this);\n    this.graph_ref = React.createRef();\n    this.handleVisualize = this.handleVisualize.bind(this);\n    this.handleClear = this.handleClear.bind(this); \n    this.state = {\n      dropdownTitle: \"Djikstra\",\n      algoIndex: 1,\n    };\n  }\n\n  render() {\n    const {dropdownTitle} = this.state;\n    return (\n      <div className=\"wrapper\">\n        <Navbar className=\"nav-wide\" bg=\"dark\" variant=\"dark\" expand=\"lg\">\n          <Nav variant=\"row\">\n            <NavDropdown ref={this.dropdown} className=\"order-0 static-width bold\" title={dropdownTitle} id=\"basic-nav-dropdown\">\n              <NavDropdown.Item eventKey=\"1\" onSelect={this.handleSelect}>Djikstra</NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"2\" onSelect={this.handleSelect}>A*</NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"3\" onSelect={this.handleSelect}>Breadth First Search</NavDropdown.Item>\n              <NavDropdown.Item eventKey=\"4\" onSelect={this.handleSelect}>Depth First Search</NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Link className=\"mx-auto bold\"  onClick={this.handleVisualize}>Visualize</Nav.Link>\n            <Nav.Link className=\"mx-auto bold\"  onClick={this.handleClear}>Clear</Nav.Link>\n            <Nav.Link className=\"mx-auto bold\"  onClick={this.handleWeight}>Random Weights</Nav.Link>\n            <Nav.Link className=\"mx-auto bold\"  onClick={this.handleGraph}>Random Maze</Nav.Link>\n          </Nav>\n        </Navbar>        \n        <Graph ref={this.graph_ref}></Graph>\n      </div>\n    )\n  }\n  \n  handleSelect(key, e) {\n    const newTitle = this.algorithms[parseInt(key) - 1];\n    this.setState({dropdownTitle: newTitle, algoIndex: parseInt(key)}); \n  }\n\n  handleVisualize(e) {\n    if(!window.GLOBAL.animate) {\n      const props = {\n        algorithm: this.state.algoIndex,\n      }\n      this.graph_ref.current.runAlgorithm(props);\n    }\n  }\n\n  handleClear(e) {\n    if(!window.GLOBAL.animate) {\n      this.graph_ref.current.clear();\n    }\n  }\n\n  handleWeight = (e) => {\n    if(!window.GLOBAL.animate) {\n      this.graph_ref.current.generateWeight();\n    }\n  }\n\n  handleGraph = (e) => {\n    if(!window.GLOBAL.animate) {\n      this.graph_ref.current.generateMaze();\n    }\n  }\n\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.GLOBAL = {\n    mouse_down: false,\n    start: [0, 0],\n    end: [8, 75],\n    animate: false,\n    animated: false,\n    dragging: false,\n    prev: null\n};\n\nwindow.cursor = 'pointer';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}